{
	"info": {
		"_postman_id": "a4ee6e8f-a90b-4caf-80cb-29831b35a4d8",
		"name": "ExFs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27918662"
	},
	"item": [
		{
			"name": "InspectionItems",
			"item": [
				{
					"name": "inspection-items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"inspectionItemId\", responseJson.id);",
									"",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"isSelected field is set to false\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.isSelected).to.be.false;",
									"});",
									"",
									"",
									"pm.test(\"The id field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Description field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"adminData contains the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.adminData).to.exist;",
									"    pm.expect(responseData.adminData.createdOn).to.exist;",
									"    pm.expect(responseData.adminData.updatedOn).to.exist;",
									"    pm.expect(responseData.adminData.createdBy).to.exist;",
									"    pm.expect(responseData.adminData.updatedBy).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Verify the condition of the brake pads and brake fluid.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/inspection-items/",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"inspection-items",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getall-inspection-items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"inspectionItemId\", responseJson[0].id);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Each object in the array should have all required fields\", function () {",
									"    pm.response.json().forEach(function (item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('description');",
									"        pm.expect(item).to.have.property('isSelected');",
									"        pm.expect(item).to.have.property('createdOn');",
									"        pm.expect(item).to.have.property('updatedOn');",
									"        pm.expect(item).to.have.property('createdBy');",
									"        pm.expect(item).to.have.property('updatedBy');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/inspection-items/",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"inspection-items",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getone-inspection-item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"isSelected field is a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.isSelected).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"The id field should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Description field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"AdminData object has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.adminData).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.adminData.createdOn).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.adminData.updatedOn).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.adminData.createdBy).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.adminData.updatedBy).to.exist.and.to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/inspection-items/{{inspectionItemId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"inspection-items",
								"{{inspectionItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "inspection-items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"id should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Description is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"adminData is an object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.adminData).to.be.an('object');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"createdBy\": \"Check for toolkits\",\n    \"description\": \"Check for toolkits\",\n    \"asd\": \"asd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/inspection-items/{{inspectionItemId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"inspection-items",
								"{{inspectionItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "inspection-items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('raw');",
									"    pm.expect(responseData).to.have.property('affected');",
									"});",
									"",
									"",
									"pm.test(\"raw is an array\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.raw).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Affected is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.affected).to.exist;",
									"    pm.expect(responseData.affected).to.be.a('number');",
									"    pm.expect(responseData.affected).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'raw' array is empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.raw).to.be.an('array').that.is.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/inspection-items/{{inspectionItemId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"inspection-items",
								"{{inspectionItemId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"serviceId\", responseJson.id);",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.isSelected).to.exist;",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.service).to.exist;",
									"    pm.expect(responseData.price).to.exist;",
									"    pm.expect(responseData.minMileage).to.exist;",
									"    pm.expect(responseData.maxMileage).to.exist;",
									"    pm.expect(responseData.adminData).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"minMileage should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.minMileage).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.minMileage).to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"maxMileage should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.maxMileage).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.maxMileage).to.be.at.least(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"service\": \"Suspension and Steering Check\",\r\n    \"minMileage\": 20000,\r\n    \"maxMileage\": 1000000,\r\n    \"price\": \"1399\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/services/",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"services",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getall-services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"serviceId\", responseJson[0].id);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each object in the response array has all the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function (service) {",
									"        pm.expect(service).to.have.property('id');",
									"        pm.expect(service).to.have.property('service');",
									"        pm.expect(service).to.have.property('price');",
									"        pm.expect(service).to.have.property('minMileage');",
									"        pm.expect(service).to.have.property('maxMileage');",
									"        pm.expect(service).to.have.property('isSelected');",
									"        pm.expect(service).to.have.property('createdOn');",
									"        pm.expect(service).to.have.property('updatedOn');",
									"        pm.expect(service).to.have.property('createdBy');",
									"        pm.expect(service).to.have.property('updatedBy');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/services/",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"services",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getone-services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"isSelected is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.isSelected).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"The id must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Service is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.service).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains all the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('isSelected');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('service');",
									"    pm.expect(responseData).to.have.property('price');",
									"    pm.expect(responseData).to.have.property('minMileage');",
									"    pm.expect(responseData).to.have.property('maxMileage');",
									"    pm.expect(responseData).to.have.property('adminData');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/services/{{serviceId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"services",
								"{{serviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The id field should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Service field should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.service).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Price field is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.price).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"All fields are present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('isSelected');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('service');",
									"    pm.expect(responseData).to.have.property('price');",
									"    pm.expect(responseData).to.have.property('minMileage');",
									"    pm.expect(responseData).to.have.property('maxMileage');",
									"    pm.expect(responseData).to.have.property('adminData');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"minMileage\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/services/{{serviceId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"services",
								"{{serviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate response body structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('raw');",
									"    pm.expect(responseData).to.have.property('affected');",
									"});",
									"",
									"",
									"pm.test(\"The 'raw' array should be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.raw).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"The 'affected' value should be 1\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.affected).to.equal(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/services/{{serviceId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"services",
								"{{serviceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ServiceForm",
			"item": [
				{
					"name": "service-form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"sfId\", responseJson.id);",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.keys('id', 'displayId', 'caseId', 'caseDisplayId', 'registeredProduct', 'customerComplaints', 'milometer', 'servicesProposed', 'inspectionItems', 'notes', 'status', 'adminData', 'statusDescription');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"displayId should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.displayId).to.exist.and.to.be.a('number', \"displayId should be a number\");",
									"    pm.expect(responseData.displayId).to.be.at.least(0, \"displayId should be a non-negative integer\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "ar",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"caseId\": \"69eca6ab-cb21-11ee-b2f3-f3d57b425c82\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/service-forms/",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"service-forms",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getall-service-forms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"sfId\", responseJson[0].id);",
									"",
									"// Test to check if the response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test to check if the response is an array",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"// Test to check if each object in the array has all the required fields",
									"pm.test(\"Each object in the array has all the required fields\", function () {",
									"    pm.response.json().forEach(function (form) {",
									"        pm.expect(form).to.have.property('id');",
									"        pm.expect(form).to.have.property('displayId');",
									"        pm.expect(form).to.have.property('caseId');",
									"        pm.expect(form).to.have.property('caseDisplayId');",
									"        pm.expect(form).to.have.property('registeredProduct');",
									"        pm.expect(form.registeredProduct).to.have.property('vehicleNumber');",
									"        pm.expect(form.registeredProduct).to.have.property('dateOfPurchase');",
									"        pm.expect(form.registeredProduct).to.have.property('model');",
									"        pm.expect(form).to.have.property('customerComplaints');",
									"        pm.expect(form).to.have.property('milometer');",
									"        pm.expect(form).to.have.property('servicesProposed');",
									"        pm.expect(form).to.have.property('inspectionItems');",
									"        pm.expect(form).to.have.property('notes');",
									"        pm.expect(form).to.have.property('status');",
									"        pm.expect(form).to.have.property('adminData');",
									"        pm.expect(form.adminData).to.have.property('createdOn');",
									"        pm.expect(form.adminData).to.have.property('updatedOn');",
									"        pm.expect(form.adminData).to.have.property('createdBy');",
									"        pm.expect(form.adminData).to.have.property('updatedBy');",
									"        pm.expect(form).to.have.property('statusDescription');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/service-forms",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"service-forms"
							],
							"query": [
								{
									"key": "$filter",
									"value": "caseId eq '71a9ab7d-d532-11ee-ab2c-759f5956dc65'",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "service-form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body has all the required fields\", function () {",
									"    var responseJSON = pm.response.json();",
									"",
									"    pm.expect(responseJSON).to.have.property('id');",
									"    pm.expect(responseJSON).to.have.property('displayId');",
									"    pm.expect(responseJSON).to.have.property('caseId');",
									"    pm.expect(responseJSON).to.have.property('caseDisplayId');",
									"    pm.expect(responseJSON).to.have.property('registeredProduct');",
									"    pm.expect(responseJSON).to.have.property('customerComplaints');",
									"    pm.expect(responseJSON).to.have.property('milometer');",
									"    pm.expect(responseJSON).to.have.property('servicesProposed');",
									"    pm.expect(responseJSON).to.have.property('inspectionItems');",
									"    pm.expect(responseJSON).to.have.property('notes');",
									"    pm.expect(responseJSON).to.have.property('status');",
									"    pm.expect(responseJSON).to.have.property('adminData');",
									"    pm.expect(responseJSON).to.have.property('statusDescription');",
									"});",
									"",
									"pm.test(\"Fields in response are equal to fields in request body\", function () {",
									"    var responseJSON = pm.response.json();",
									"    var requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseJSON.servicesProposed).to.eql(requestBody.servicesProposed);",
									"    pm.expect(responseJSON.inspectionItems).to.eql(requestBody.inspectionItems);",
									"    pm.expect(responseJSON.status).to.eql(requestBody.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Z02\",\n    \"servicesProposed\": [\n        {\n            \"id\": \"b8c35199-1922-42c3-8c4e-d4eef3c19148\",\n            \"service\": \"Change Filter\",\n            \"price\": \"499\",\n            \"isSelected\": true\n        },\n        {\n            \"id\": \"330b4de0-b389-478e-bede-e4ade109a6a1\",\n            \"service\": \"Change Tyre\",\n            \"price\": \"499\",\n            \"isSelected\": true\n        },\n        {\n            \"id\": \"82604309-d5bb-4516-a3d5-195ecaa0a6d4\",\n            \"service\": \"Wheel Alignment\",\n            \"price\": \"399\",\n            \"isSelected\": true\n        }\n    ],\n    \"inspectionItems\": [\n        {\n            \"id\": \"3f32e6e4-8bf2-411e-90a6-87e27f663f4b\",\n            \"description\": \"Check for toolkits\",\n            \"isSelected\": true\n        },\n        {\n            \"id\": \"11f83129-c5af-4dff-82ef-e372f29b8f01\",\n            \"description\": \"Inspect lights (headlights, taillights, brake lights, turn signals).\",\n            \"isSelected\": true\n        },\n        {\n            \"id\": \"ff53693c-71d2-493a-80c8-d58433bc8b52\",\n            \"description\": \"Inspect the engine for oil leaks.\",\n            \"isSelected\": true\n        },\n        {\n            \"id\": \"129daa0c-fadc-4714-bddc-9a1eb9b3f480\",\n            \"description\": \"Verify the condition of the serpentine belt.\",\n            \"isSelected\": true\n        },\n        {\n            \"id\": \"ff304083-b125-4cb4-b024-235322010614\",\n            \"description\": \"Check transmission fluid level and condition.\",\n            \"isSelected\": true\n        },\n        {\n            \"id\": \"ea8dc1e7-1359-4973-9035-3a18035b1e41\",\n            \"description\": \"Verify the condition of the brake pads and brake fluid.\",\n            \"isSelected\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/service-forms/{{sfId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"service-forms",
								"{{sfId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "service-form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'raw' array is present and is empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.raw).to.exist.and.to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"The 'affected' field is present in the response and is equal to 1\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.affected).to.exist.and.to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/service-forms/{{sfId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"service-forms",
								"{{sfId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "JobCard",
			"item": [
				{
					"name": "job-card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"jcId\", responseJson.id);",
									"pm.collectionVariables.set(\"jcsId\", responseJson.servicesSelected[0].id);",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"The id should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"displayId is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.displayId).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.displayId).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Response body has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('displayId');",
									"    pm.expect(responseData).to.have.property('caseId');",
									"    pm.expect(responseData).to.have.property('caseDisplayId');",
									"    pm.expect(responseData).to.have.property('registeredProduct');",
									"    pm.expect(responseData).to.have.property('customerComplaints');",
									"    pm.expect(responseData).to.have.property('milometer');",
									"    pm.expect(responseData).to.have.property('servicesSelected');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('estimatedCompletionDate');",
									"    pm.expect(responseData).to.have.property('adminData');",
									"    pm.expect(responseData).to.have.property('statusDescription');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/job-cards/?sourceid=c4e111e7-0008-4a94-bbe9-5687e96216ae&sourceType=service-form",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"job-cards",
								""
							],
							"query": [
								{
									"key": "sourceid",
									"value": "c4e111e7-0008-4a94-bbe9-5687e96216ae"
								},
								{
									"key": "sourceType",
									"value": "service-form"
								},
								{
									"key": "sourceType",
									"value": "asdasd",
									"disabled": true
								},
								{
									"key": "serviceAdvisor",
									"value": "Sandra Webbera",
									"disabled": true
								},
								{
									"key": "displayId",
									"value": "1",
									"disabled": true
								},
								{
									"key": "caseId",
									"value": "2bfdd60f-da14-11ed-bf97-bb732c681de4",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getone-job-card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"displayId is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.displayId).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.displayId).to.be.at.least(0, \"Value should be non-negative\");",
									"});",
									"",
									"",
									"pm.test(\"Response has all required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    // Check if all fields are present",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('displayId');",
									"    pm.expect(responseData).to.have.property('caseId');",
									"    pm.expect(responseData).to.have.property('caseDisplayId');",
									"    pm.expect(responseData).to.have.property('registeredProduct');",
									"    pm.expect(responseData).to.have.property('customerComplaints');",
									"    pm.expect(responseData).to.have.property('milometer');",
									"    pm.expect(responseData).to.have.property('servicesSelected');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('serviceAdvisor');",
									"    pm.expect(responseData).to.have.property('customerDetails');",
									"    pm.expect(responseData).to.have.property('estimatedCompletionDate');",
									"    pm.expect(responseData).to.have.property('adminData');",
									"    pm.expect(responseData).to.have.property('statusDescription');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/job-cards/{{jcId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"job-cards",
								"{{jcId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getall-job-card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"jcId\", responseJson[0].id);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"The 'id' field should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function (jobCard) {",
									"        pm.expect(jobCard.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"pm.test(\"Each job card in the response has all the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.forEach(function (jobCard) {",
									"        pm.expect(jobCard).to.have.property('id');",
									"        pm.expect(jobCard).to.have.property('displayId');",
									"        pm.expect(jobCard).to.have.property('caseId');",
									"        pm.expect(jobCard).to.have.property('caseDisplayId');",
									"        pm.expect(jobCard).to.have.property('registeredProduct');",
									"        pm.expect(jobCard).to.have.property('customerComplaints');",
									"        pm.expect(jobCard).to.have.property('milometer');",
									"        pm.expect(jobCard).to.have.property('servicesSelected');",
									"        pm.expect(jobCard).to.have.property('status');",
									"        pm.expect(jobCard).to.have.property('serviceAdvisor');",
									"        pm.expect(jobCard).to.have.property('customerDetails');",
									"        pm.expect(jobCard).to.have.property('estimatedCompletionDate');",
									"        pm.expect(jobCard).to.have.property('adminData');",
									"        pm.expect(jobCard).to.have.property('statusDescription');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/job-cards/?$search=\"java_202\"",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"job-cards",
								""
							],
							"query": [
								{
									"key": "$filter",
									"value": "caseId eq 56d0f4d3-cbe8-11ee-b2f3-f98afdc59691",
									"disabled": true
								},
								{
									"key": "$search",
									"value": "\"java_202\""
								},
								{
									"key": "$filter",
									"value": "individualCustomer.name ct 'AKRON' or account.name ct 'AKRON'",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "vehicleNumber ct \"KH1234DF\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "job-card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'raw' array is present in the response and is empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.raw).to.exist.and.to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'affected' field is present and equal to 1\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.affected).to.exist.and.to.equal(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/job-cards/d2cd9993-1b5e-4d4f-8924-3091377ab0c0",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"job-cards",
								"d2cd9993-1b5e-4d4f-8924-3091377ab0c0"
							]
						}
					},
					"response": []
				},
				{
					"name": "job-card service",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"observation\": \"asd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/job-cards/147cc143-a43b-4ca2-8dc9-d2e0e6b0245c/services/689d58ba-fc8f-447b-840a-d24e744d3f61",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"job-cards",
								"{{jcId}}",
								"services",
								"689d58ba-fc8f-447b-840a-d24e744d3f61"
							]
						}
					},
					"response": []
				},
				{
					"name": "validations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vZXh0ZXJuYWwtZnVuYy1zZXJ2aWNlcy5hdXRoZW50aWNhdGlvbi5ldTEwLmhhbmEub25kZW1hbmQuY29tL3Rva2VuX2tleXMiLCJraWQiOiJkZWZhdWx0LWp3dC1rZXktLTIxMDA1NDMxMDIiLCJ0eXAiOiJKV1QiLCJqaWQiOiAiaEZFNTN6ZXRzQmY3Yll1bjZnMktJQ3R2TUk2Z1FZYnZmakZPQmxaOW9Ccz0ifQ.eyJqdGkiOiIxZDQ4YTYxYzA2YjU0NDAzOTBlODFmYjcyZjg3ZTRlZiIsImV4dF9hdHRyIjp7ImVuaGFuY2VyIjoiWFNVQUEiLCJzdWJhY2NvdW50aWQiOiJiNWFkYTllOC02NjY1LTQ3NGEtOGU5NC1hZjYxMzU4NTkwZGQiLCJ6ZG4iOiJleHRlcm5hbC1mdW5jLXNlcnZpY2VzIn0sInN1YiI6InNiLXZlaGljbGUtc2VydmljZSF0MTczOTE4IiwiYXV0aG9yaXRpZXMiOlsidWFhLnJlc291cmNlIl0sInNjb3BlIjpbInVhYS5yZXNvdXJjZSJdLCJjbGllbnRfaWQiOiJzYi12ZWhpY2xlLXNlcnZpY2UhdDE3MzkxOCIsImNpZCI6InNiLXZlaGljbGUtc2VydmljZSF0MTczOTE4IiwiYXpwIjoic2ItdmVoaWNsZS1zZXJ2aWNlIXQxNzM5MTgiLCJncmFudF90eXBlIjoiY2xpZW50X2NyZWRlbnRpYWxzIiwicmV2X3NpZyI6IjIwZTNlOTc5IiwiaWF0IjoxNzA1OTg3MDUyLCJleHAiOjE3MDYwMzAyNTIsImlzcyI6Imh0dHBzOi8vZXh0ZXJuYWwtZnVuYy1zZXJ2aWNlcy5hdXRoZW50aWNhdGlvbi5ldTEwLmhhbmEub25kZW1hbmQuY29tL29hdXRoL3Rva2VuIiwiemlkIjoiYjVhZGE5ZTgtNjY2NS00NzRhLThlOTQtYWY2MTM1ODU5MGRkIiwiYXVkIjpbInVhYSIsInNiLXZlaGljbGUtc2VydmljZSF0MTczOTE4Il19.Ctvd-ZzQXOd-JBfrzV8tpngEi6rMZUOg_JzBrkVPs3TvCcAnaJQ0k_MkrXs5JfYRmmTMAREpAXO4LcEvGAPnyRuAJ2N_e2GHRsK9_8ON6CmhHJ5J4E2fmZMaErgTjyGIi8WzxrhR6LRf453tQV64RfZtUbhBECUbfa2Ei0SNqggLcBzhGGraj072yXWsStSKuOjrcD9-PplauOonOWZBXj3oF9tYO65WRG1ETzP9u0TS5TmNxK7AGyMRaEX25KkcjEaqaaRUyoqGp6DrJtpG878PtY7rQqkODpccbf_P1kgKf8g2RT-m9U8GIvICNUeRWkKsMWiWF_mUjrHPNQtpfA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"entity\": \"sap.ssc.caseservice.entity.case\",\n    \"currentImage\": {\n        \"id\": \"0ae489f2-6900-11ee-a267-434a6559950f\",\n        \"displayId\": \"738\",\n        \"subject\": \"exfs_12_10_02\",\n        \"priority\": \"03\",\n        \"priorityDescription\": \"Normal\",\n        \"origin\": \"MANUAL_DATA_ENTRY\",\n        \"caseType\": \"ZVSR\",\n        \"caseTypeDescription\": \"Vehicle Service Case Type\",\n        \"statusSchema\": \"Z1\",\n        \"status\": \"05\",\n        \"statusDescription\": \"Completed\",\n        \"escalationStatus\": \"NOT_ESCALATED\",\n        \"isRecommendedCommunicationLanguage\": false,\n        \"registeredProducts\": [\n            {\n                \"serialId\": \"9999\",\n                \"referenceProduct\": {\n                    \"id\": \"11edd9f9-9b1d-af8e-afdb-812c72a8c000\"\n                },\n                \"referenceDate\": \"2023-06-01T00:00:00.000Z\",\n                \"id\": \"3bda2314-4f82-4e2b-bb39-124de0062c5e\",\n                \"displayId\": \"41\",\n                \"status\": \"ACTIVE\",\n                \"description\": \"TATA Nexon XMA\",\n                \"isMain\": true\n            }\n        ],\n        \"individualCustomer\": {\n            \"emailId\": \"raghuTesting@gmail.com\",\n            \"id\": \"11ee5b8e-599b-82ae-afdb-81fd4ba8c000\",\n            \"displayId\": \"1000380\",\n            \"name\": \"Raghu Exfs\",\n            \"isDeleted\": false,\n            \"partyRoleCategory\": \"ACCOUNT\",\n            \"partyRole\": \"1001\",\n            \"partyRoleDescription\": \"Account\",\n            \"addressId\": \"11ee5b8e-599c-1eee-afdb-81fd4ba8c000\",\n            \"determinationMethodCode\": 1,\n            \"isMain\": true,\n            \"partyType\": \"INDIVIDUAL_CUSTOMER\"\n        },\n        \"processor\": {\n            \"emailId\": \"tony.mathew@sap.com\",\n            \"employeeDisplayId\": \"I543617\",\n            \"id\": \"11ee0053-8b60-e00e-afdb-811968a8c000\",\n            \"displayId\": \"8000000451\",\n            \"name\": \"Tony Mathew\",\n            \"isDeleted\": false,\n            \"partyRoleCategory\": \"PROCESSOR\",\n            \"partyRole\": \"40\",\n            \"partyRoleDescription\": \"Processor\",\n            \"addressId\": \"11ee4bf1-b60a-1c1e-afdb-81fe52a8c000\",\n            \"determinationMethodCode\": 3,\n            \"isMain\": true,\n            \"partyType\": \"EMPLOYEE\"\n        },\n        \"reporter\": {\n            \"id\": \"11ee0053-8b60-e00e-afdb-811968a8c000\",\n            \"displayId\": \"8000000451\",\n            \"name\": \"Tony Mathew\",\n            \"isDeleted\": false,\n            \"partyRoleCategory\": \"REPORTER\",\n            \"partyRole\": \"214\",\n            \"partyRoleDescription\": \"Reporter\",\n            \"addressId\": \"11ee4bf1-b60a-1c1e-afdb-81fe52a8c000\",\n            \"determinationMethodCode\": 3,\n            \"isMain\": true,\n            \"partyType\": \"EMPLOYEE\"\n        },\n        \"timePoints\": {\n            \"reportedOn\": \"2023-10-12T13:04:00.000Z\",\n            \"completedOn\": \"2023-10-12T13:09:38.913Z\",\n            \"completionDueOn\": \"2023-10-17T12:00:00.000Z\",\n            \"assignedToCustomerOn\": \"2023-10-12T13:08:31.882Z\",\n            \"initialReviewDueOn\": \"2023-10-13T05:00:00.000Z\",\n            \"initialReviewCompletedOn\": \"2023-10-12T13:08:31.882Z\",\n            \"resolutionDueOn\": \"2023-10-16T12:00:00.000Z\",\n            \"responseDueOn\": \"2023-10-13T07:00:00.000Z\",\n            \"assignedToProcessorOn\": \"2023-10-12T13:05:40.353Z\"\n        },\n        \"catalog\": {\n            \"id\": \"7bea058c-dc04-4221-be52-fcbaa7187396\",\n            \"displayId\": \"ZVSR\",\n            \"name\": \"Vehicle Service\"\n        },\n        \"serviceLevelId\": \"79ad2416-f3ba-11ed-bea5-f786727d75a8\",\n        \"serviceLevel\": \"Car Servicing SLA\",\n        \"durationTerms\": {\n            \"durationWithAgent\": \"P0Y0M0DT0H0M0S\"\n        },\n        \"isRecommendedCategory\": false,\n        \"isEndOfPurpose\": false,\n        \"isDepersonalized\": false,\n        \"isRead\": true,\n        \"isIrrelevant\": false,\n        \"isFormEnabled\": false,\n        \"isSubcaseEnabled\": true,\n        \"isTaskEnabled\": true,\n        \"extensions\": {\n            \"milometer_lgfbu3bg\": 4567,\n            \"serviceformid_lgfbwo7p\": \"7\",\n            \"jobcardid_lgfbv7xg\": \"6\"\n        },\n        \"adminData\": {\n            \"createdOn\": \"2023-10-12T13:05:39.828Z\",\n            \"createdBy\": \"d42ca091-4bf1-11ee-8c78-43e3099ef9e7\",\n            \"createdByName\": \"Tony Mathew\",\n            \"updatedOn\": \"2023-10-12T13:09:38.640Z\",\n            \"updatedBy\": \"d42ca091-4bf1-11ee-8c78-43e3099ef9e7\",\n            \"updatedByName\": \"Tony Mathew\"\n        }\n    },\n    \"beforeImage\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/job-cards/validations",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"job-cards",
								"validations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Employees",
			"item": [
				{
					"name": "employees",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/employees",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "employees",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Employee name\",\n    \"email\": \"employee.name@company.com\",\n    \"btpUserId\": \"891d4391-0ff9-48ca-ac7e-70e899ac5d85\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/employees",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "employee",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/employees/7cdb8762-80a4-4e42-b319-727e88e456ef",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"employees",
								"7cdb8762-80a4-4e42-b319-727e88e456ef"
							]
						}
					},
					"response": []
				},
				{
					"name": "employee",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"emp name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/vehicle-service/employees/fba0f015-ca6f-47f7-8ba1-5a0ca82bf567",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"employees",
								"fba0f015-ca6f-47f7-8ba1-5a0ca82bf567"
							]
						}
					},
					"response": []
				},
				{
					"name": "employee",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/employees/fba0f015-ca6f-47f7-8ba1-5a0ca82bf567",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"employees",
								"fba0f015-ca6f-47f7-8ba1-5a0ca82bf567"
							]
						}
					},
					"response": []
				},
				{
					"name": "currentUserInfo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/vehicle-service/employees/currentUserInfo",
							"host": [
								"{{host}}"
							],
							"path": [
								"vehicle-service",
								"employees",
								"currentUserInfo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/vehicle-service/healthz",
					"host": [
						"{{host}}"
					],
					"path": [
						"vehicle-service",
						"healthz"
					]
				}
			},
			"response": []
		},
		{
			"name": "GenerateInvoice",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/vehicle-service/generate-invoice/?$filter=caseId eq '9c65e162-043e-11ee-b91a-71a8c681c084'",
					"host": [
						"{{host}}"
					],
					"path": [
						"vehicle-service",
						"generate-invoice",
						""
					],
					"query": [
						{
							"key": "$filter",
							"value": "caseId eq '9c65e162-043e-11ee-b91a-71a8c681c084'"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "clientSecret",
				"value": "9e702377-8cce-4159-a628-bd6b3a3c973b$Z2TMEIzAFAm9sAj01Td5eDE6-7nPXq0pQARaUJ0kvJY=",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "sb-vehicle-service!t173918",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://external-func-services.authentication.eu10.hana.ondemand.com/oauth/authorize?redirect_uri=https://external-func-services.launchpad.cfapps.eu10.hana.ondemand.com/login/",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://external-func-services.authentication.eu10.hana.ondemand.com/oauth/token",
				"type": "string"
			},
			{
				"key": "refreshRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "tokenRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "authRequestParams",
				"value": [],
				"type": "any"
			},
			{
				"key": "tokenName",
				"value": "sToken",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "username",
				"value": "tony.mathew@sap.com",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://external-func-services.launchpad.cfapps.eu10.hana.ondemand.com/login/",
				"type": "string"
			},
			{
				"key": "password",
				"value": "12June@1995",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://vehicle-service.c7faf5c.kyma.ondemand.com",
			"type": "string"
		},
		{
			"key": "sToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "inspectionItemId",
			"value": ""
		},
		{
			"key": "sfId",
			"value": ""
		},
		{
			"key": "jcId",
			"value": ""
		},
		{
			"key": "serviceId",
			"value": ""
		},
		{
			"key": "jcsId",
			"value": ""
		}
	]
}