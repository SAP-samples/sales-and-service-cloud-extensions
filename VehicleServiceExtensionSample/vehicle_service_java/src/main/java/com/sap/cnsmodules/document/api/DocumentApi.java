

package com.sap.cnsmodules.document.api;

import com.sap.cloud.sdk.services.openapi.core.OpenApiRequestException;
import com.sap.cloud.sdk.services.openapi.core.OpenApiResponse;
import com.sap.cloud.sdk.services.openapi.core.AbstractOpenApiService;
import com.sap.cloud.sdk.services.openapi.apiclient.ApiClient;

import com.sap.cnsmodules.document.model.Createdocumentservicedocument500Response ; //NOPMD
import com.sap.cnsmodules.document.model.DocumentCreateRequest ; //NOPMD
import com.sap.cnsmodules.document.model.DocumentPostResponse ; //NOPMD

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.google.common.annotations.Beta;

import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;

/**
* Document Service in version 1.0.0.
*
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*/

public class DocumentApi extends AbstractOpenApiService {
    /**
    * Instantiates this API class to invoke operations on the Document Service.
    *
    * @param httpDestination The destination that API should be used with
    */
    public DocumentApi( @Nonnull final HttpDestinationProperties httpDestination )
    {
        super(httpDestination);
    }

    /**
    * Instantiates this API class to invoke operations on the Document Service based on a given {@link ApiClient}.
    *
    * @param apiClient
    *            ApiClient to invoke the API on
    */
    @Beta
    public DocumentApi( @Nonnull final ApiClient apiClient )
    {
         super(apiClient);
    }

    
    /**
     * <p>Create Document</p>
     *<p></p>
     * <p><b>201</b> - Document created.
     * <p><b>401</b> - Unauthorized.  This error is caused when the request has not been applied because there are no valid authentication credentials for the target resource.
     * <p><b>403</b> - Forbidden  This client error code indicates that the server understood the request but refuses to authorize it.
     * <p><b>404</b> - Case not found.
     * <p><b>500</b> - Internal Server Error.  Failed to read the case.
     * @param xSapCrmToken  (required)
        The value for the parameter xSapCrmToken
     * @param documentCreateRequest  (optional)
        The value for the parameter documentCreateRequest
     * @return DocumentPostResponse
     * @throws OpenApiRequestException if an error occurs while attempting to invoke the API
     */
    @Nullable  public DocumentPostResponse createdocumentservicedocument( @Nonnull final String xSapCrmToken,  @Nullable final DocumentCreateRequest documentCreateRequest) throws OpenApiRequestException {
        final Object localVarPostBody = documentCreateRequest;
        
        // verify the required parameter 'xSapCrmToken' is set
        if (xSapCrmToken == null) {
            throw new OpenApiRequestException("Missing the required parameter 'xSapCrmToken' when calling createdocumentservicedocument");
        }
        
        final String localVarPath = UriComponentsBuilder.fromPath("/sap/c4c/api/v1/document-service/documents").build().toUriString();

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        if (xSapCrmToken != null)
            localVarHeaderParams.add("x-sap-crm-token", apiClient.parameterToString(xSapCrmToken));

        final String[] localVarAccepts = { 
            "application/json"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
        };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        final String[] localVarAuthNames = new String[] { "basicAuthentication" };

        final ParameterizedTypeReference<DocumentPostResponse> localVarReturnType = new ParameterizedTypeReference<DocumentPostResponse>() {};
        return apiClient.invokeAPI(localVarPath, HttpMethod.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
    * <p>Create Document</p>
     *<p></p>
     * <p><b>201</b> - Document created.
     * <p><b>401</b> - Unauthorized.  This error is caused when the request has not been applied because there are no valid authentication credentials for the target resource.
     * <p><b>403</b> - Forbidden  This client error code indicates that the server understood the request but refuses to authorize it.
     * <p><b>404</b> - Case not found.
     * <p><b>500</b> - Internal Server Error.  Failed to read the case.
* @param xSapCrmToken
            The value for the parameter xSapCrmToken
* @return DocumentPostResponse
* @throws OpenApiRequestException if an error occurs while attempting to invoke the API
     */
    @Nullable   public DocumentPostResponse createdocumentservicedocument( @Nonnull final String xSapCrmToken) throws OpenApiRequestException {
        return createdocumentservicedocument(xSapCrmToken, null);
    }
}
